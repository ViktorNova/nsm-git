#!/usr/bin/env python
# filename: nsm-git-ui

import os
import time, datetime
from PyQt4 import QtGui, QtCore
import git
from xml.sax.saxutils import escape
import xml.etree.ElementTree as ET
import cStringIO as SIO


class Commit(QtGui.QListWidgetItem):
    def __init__(self, commit):
        QtGui.QListWidgetItem.__init__(self)

        self.commit = commit
        date = datetime.datetime.strptime(time.ctime(self.commit.committed_date), '%a %b %d %H:%M:%S %Y')
        date = date.strftime('%a %b %d %I:%M %p %Y')
        self.setText('{}...\t{}'.format(str(self.commit)[:7], date))


class CommitList(QtGui.QListWidget):
    def __init__(self, repo):
        QtGui.QListWidget.__init__(self)
        self.repo = repo
        commits = list(self.repo.iter_commits())
        for c in commits:
            self.addItem(Commit(c))


class MainWindow(QtGui.QWidget):
    def __init__(self, repo):
        QtGui.QWidget.__init__(self)
        self.curview = None

        self.list = CommitList(git.Repo(repo))
        self.commit_message = QtGui.QTextEdit()
        self.commit_message.setReadOnly(True)

        self.list.setMaximumWidth(260)
        self.commit_message.setMaximumWidth(260)

        self.tabs = QtGui.QTabWidget()

        self.list.currentRowChanged.connect(self.showCommit)

        self.leftvBox = QtGui.QVBoxLayout()
        self.leftvBox.addWidget(QtGui.QLabel('commits'))
        self.leftvBox.addWidget(self.list)
        self.leftvBox.addWidget(QtGui.QLabel('commit message'))
        self.leftvBox.addWidget(self.commit_message)

        self.rightvBox = QtGui.QVBoxLayout()
        self.rightvBox.addWidget(self.tabs)

        self.hBox = QtGui.QHBoxLayout()
        self.hBox.addLayout(self.leftvBox)
        self.hBox.addLayout(self.rightvBox)
        self.setLayout(self.hBox)
        self.list.setCurrentItem(self.list.item(0))
        #self.callback(self.list.item(0))


    def showCommit(self, commit_index):
        commit_item = self.list.item(commit_index)
        if not self.curview == commit_item:
            self.curview = commit_item
            self.tabs.clear()
            commit = commit_item.commit
            html_escape_table = {
                    '"': "&quot;",
                    "'": "&apos;",
                    " ": "&nbsp;"
                    }
            message = str(commit.message)
            if message.split('\n')[0] == 'nsm-git':
                message = message[9:].replace('\t','')
            self.commit_message.setText(message)
            try:
                diffs = commit.parents[0].diff(commit, create_patch=True)
                for diff in diffs:
                    blob_name = diff.a_blob.name if diff.a_blob else diff.b_blob.name
                    if any(app in blob_name for app in ('Carla','Hydrogen')):
                        try:
                            item = commit.tree[blob_name]
                            file_contents = SIO.StringIO()
                            item.stream_data(file_contents)
                            file_tree = ET.fromstring(file_contents.getvalue())
                            file_contents.close()
                        except:
                            pass

                    #lines = [x for x in diff.diff.split('\n')[2:]]
                    #data = []
                    #tags = []
                    #for line in lines:
                    #    if len(line) > 0:
                    #        if line[0] == '-':
                    #            line = line[1:]
                    #        #elif line[0] == '+':
                    #        try:
                    #            datum = ET.fromstring(line)
                    #            data.append(datum)
                    #        except ET.ParseError:
                            

                    format_lines = [escape(x, html_escape_table) for x in diff.diff.split('\n')[2:]]
                    for l in range(len(format_lines)):
                        if len(format_lines[l]) > 0:
                            if format_lines[l][0] == '-':
                                format_lines[l] = '<div style="color:red;">' + format_lines[l][1:] + '</div>'
                            elif format_lines[l][0] == '+':
                                format_lines[l] = '<div style="color:green;">' + format_lines[l][1:] + '</div>'
                            else:
                                format_lines[l] = '<div>' + format_lines[l] + '</div>'
                    text = ''.join(format_lines)
                    viewer = QtGui.QTextEdit()
                    viewer.setReadOnly(True)
                    viewer.setHtml(text)
                    self.tabs.addTab(viewer, blob_name)
            except IndexError:
                for item in commit.tree:
                    if item.name != '.gitignore':
                        file_contents = SIO.StringIO()
                        item.stream_data(file_contents)
                        viewer = QtGui.QTextEdit()
                        viewer.setReadOnly(True)
                        viewer.setHtml(file_contents.getvalue())
                        file_contents.close()
                        self.tabs.addTab(viewer, item.name)


if __name__ == '__main__':
    import sys
    app = QtGui.QApplication(sys.argv)
    if len(sys.argv) > 1:
        print sys.argv[1]
        main = MainWindow(sys.argv[1])
        main.show()
        sys.exit(app.exec_())
